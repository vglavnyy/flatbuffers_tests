// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers/flatbuffers.h"

struct tEmpty;
struct tEmptyT;

inline const flatbuffers::TypeTable *tEmptyTypeTable();

struct tEmptyT : public flatbuffers::NativeTable {
  typedef tEmpty TableType;
  tEmptyT() {
  }
};

struct tEmpty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef tEmptyT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return tEmptyTypeTable();
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  tEmptyT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(tEmptyT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<tEmpty> Pack(flatbuffers::FlatBufferBuilder &_fbb, const tEmptyT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct tEmptyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit tEmptyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  tEmptyBuilder &operator=(const tEmptyBuilder &);
  flatbuffers::Offset<tEmpty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<tEmpty>(end);
    return o;
  }
};

inline flatbuffers::Offset<tEmpty> CreatetEmpty(
    flatbuffers::FlatBufferBuilder &_fbb) {
  tEmptyBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<tEmpty> CreatetEmpty(flatbuffers::FlatBufferBuilder &_fbb, const tEmptyT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline tEmptyT *tEmpty::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new tEmptyT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void tEmpty::UnPackTo(tEmptyT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<tEmpty> tEmpty::Pack(flatbuffers::FlatBufferBuilder &_fbb, const tEmptyT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatetEmpty(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<tEmpty> CreatetEmpty(flatbuffers::FlatBufferBuilder &_fbb, const tEmptyT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const tEmptyT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return CreatetEmpty(
      _fbb);
}

inline const flatbuffers::TypeTable *tEmptyTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_TEST_H_
